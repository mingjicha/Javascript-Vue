computed property

a라는 변수와 user라는 객체
let a = 'age';
const user = {
  name : 'Mike',
  age : 30
}
age : 30  -> [a] : 30으로 사용해도 됨
대괄호로 묶어주면 변수 a에 할당된 값이 들어감
이를 계산된 프로퍼티(computed property)

const user = {
  [1 + 4] : 5,
  ["안녕" + "하세요"] : "Hello"
}
이렇게 식 자체로 넣는 것도 가능함
console.log(user); // user의 객체 {5: 5, 안녕하세요: "Hello"}

✅객체에서 사용할 수 있는 몇가지 메소드
1. Object.assign() : 객체 복제
const user = {
  name : 'Mike',
  age : 30
}
const cloneUser = user;
위처럼 사용했을 때,
cloneUser.name = 'Tom'; 이라고 작성하면
user.name도 'Tom'으로 바뀌게 됨

내용만 동일하게 복제하고 싶으면,
const newUser = Object.assign({}, user);
여기서 {}빈 객체는 초기값
두번째 user위치에 들어온 것들이 초기값으로 병합됨
=> {} + { name : 'Mike', age : 30 } 
= {
  name : 'Mike',
  age: 30,
}
이렇게 하면 이름을 바꾸어도
newUser.name = 'Tom';
console.log(user.name); // 'Mike'
이름은 변함 없음
newUser != user
같은 객체가 아님

만약 아래처럼 빈 객체가 아니라면
const newUser = Object.assign({ gender: 'male' }, user);
= {
  gender : 'male',
  name : 'Mike',
  age : 30,
}
합쳐짐

여기서 같은 키라면?
const newUser = Object.assign({ name: 'Tom' }, user);
= {
  name : 'Tom',
  age : 30,
}
덮어쓰게 됨

여러개 복제 가능
const user = {
  name : 'Mike
}
const info1 = {
  age : 30,
}
const info2 = {
  gender : 'male',
}
const plusUser = Object.assign(user, info1, info2);

2. Object.keys() : 키 배열 반환
const user = {
  name : 'Mike',
  age : 30,
  gender : 'male',
}
Object.keys(user); // ["name", "age", "gender"]
키 들이 배열로 만들어져 반환 됨

3. Object.values() : 값 배열 반환
Object.values(user) // ["Mike", 30, "male"]

4. Object.entries() : 키/값 배열 반환
Object.entries(user); 
// [
  ["name", "Mike"],
  ["age", 30],
  ["gender", "male"]
]

지금까지와 반대로 배열을 객체로
5. Object.fromEntries() : 키/값 배열을 객체로
const arr = [
  ["name", "Mike"],
  ["age", 30],
  ["gender", "male"],
];
Object.fromEntries(arr);