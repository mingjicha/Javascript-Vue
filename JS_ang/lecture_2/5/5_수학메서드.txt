toString()
실생활에서 사용하는 10진수 -> 개발에서 사용하는 2진수/16진수

let num = 10;
숫자를 문자로 바꿔 줌
num.toString(); // "10"
괄호 안에 숫자를 쓰면 그 숫자의 진법으로 변환
num.toString(2); // "1010" 

let num2 = 255;
num2.toString(16); // "ff"

수학과 관련된 프로퍼티
Math.Pi; // 3.15...
Math.ceil() : 올림
let num1 = 5.1;
let num2 = 5.7;
Math.ceil(num1); // 6
Math.ceil(num2); // 6

Math.floor() : 내림
Math.floor(num1); // 5
Math.floor(num2); // 5

Math.round() : 반올림
Math.round(num1); // 5
Math.round(num2); // 6

💡보통 작업을 하다보면 소수점까지 표현해야할 일이 많음
요구사항 : 소수점 둘째자리까지 표현(셋째 자리에서 반올림)
let userRate = 30.1234;
Math.round(userRate * 100)100 // 30.12
또는
userRate.toFixed(2); // "30.12"
만약에 
userRate.toFixed(0); // "30"
userRate.toFixed(6); // "30.123400"
-> 통계나 지표 작업할 때 굉장히 많이 쓰임
🚫주의할 점
toFixed는 문자열로 반환됨
그래서 Number를 이용하는 경우가 많음
Number(userRate.toFixed(2)); // 30.12

isNaN() : NaN인지 검사하기
let x = Number('X'); // NaN
NaN은 신기하게도 자기자신과도 똑같지 않다고 함
x == NaN // false
x === NaN // false
NaN == NaN // false
isNaN(x) // true
isNaN(3) // false

parselnt() : 문자열을 숫자로 바꿔줌(정수만)
let margin = '10px';
parseInt는 문자가 혼용되어 있어도 읽을 수 있는 부분까지 읽음
parseInt(margin); // 10
Number는 그냥 NaN으로 반환
Number(margin); // NaN

만약 앞에 숫자로 시작하지 않으면 NaN으로 반환
let redColor = 'f3';
parseInt(redColor); // NaN
16진수로 반환한다면 f가 16진수로 바꿔서 반환됨
parseInt(redColor, 16); // 243
문자열 11을 숫자로 바꾸고 2진수로 바꾸면,
parseInt('11', 2) // 3

parseFloat() : 문자열을 숫자로 바꿔주면서 부등 소수점을 반환
let padding = '18.5%';
parseInt(padding); // 18
parseFloat(padding); // 18.5

Math.random() : 0~1 사이 무작위 숫자 생성
Math.random() // 0.260278324548578
만약 1~100 사이 임의의 숫자를 뽑고 싶다면?
Math.floor(Math.random()*100)+1
1. Math.random() ex)0.6789
2. Math.random()*100 ex)67.89
3. Math.floor(Math.random()*100) ex)67
4. Math.floor(Math.random()*100)+1 -> 랜덤 숫자가 0.0xx로 시작하면 버림을 했을 때 0이 나올 수 있으므로

Math.max()/Math.min() : 괄호 안에 인수들 중 최대값 또는 최소값 구함
Math.abs() : 절대값(Absolut 약자)
Math.pow(n, m) : 제곱
2의 10승
Math.pow(2, 10); // 1024
Math.sqrt() : 제곱근

쇼핑몰, 통계, 지표 업무를 할 때 사용함!!!