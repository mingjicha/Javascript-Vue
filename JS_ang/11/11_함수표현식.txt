10에서 만든 함수는 함수 선언문이라고 함.
[함수 선언문]
function sayHello() {
  console.log('Hello');
}
sayHello();

[함수 표현식]
let sayHello = function() {
  console.log('Hello');
}
sayHello();

사용방식과 실행방식 선언문과 동일
그럼 작성하는 법 외에 어떤 차이가 있을까❓
✅함수 선언문 : 어디서든 호출 가능
sayHello();
function sayHello() {
  console.log('Hello');
}
호출을 먼저하고도 가능하게 되는 이유는 
자바스크립트는 실행 전, 초기화 단계에서 선언된 함수를 모두 찾아서 먼저 실행하고 호출되기 떄문
-> 호이스팅

✅함수 표현식 : 코드에 도달하면 생성
let sayHello = function() {
  console.log('Hello');
}
sayHello();
함수 표현식은 한 줄씩 읽으면서 실행되므로 코드에 도달하면 생성되고 그 이후에 사용 가능

💡그래서 뭐가 더 좋은가?
자유롭고 편하게 코딩하려면 그냥 함수 선언문 사용하면 됨

✅화살표 함수
let add = function(num1, num2) {
  return num1 + num2;
}
위의 함수를 화살표 함수를 바꾸면
let add = (num1, num2) => {
  return num1 + num2;
}
이렇게 간결하게 작성할 수 있음.

만약 리턴문이 한 줄이라면
let add = (num1, num2) => num1 + num2; 
로도 작성할 수 있음

인수가 하나라면
let sayHello = name => `Hello, ${name}`;

인수가 없다면
let showError = () => {
  alert('error!');
}
괄호를 생략할 수 없음

또한 리턴문이 한 줄이라 해도 위에 코드가 여러 줄이 있다면
let add = (num1, num2) => {
  const result = num1 + num2;
  return result;
}
💡ES6 이후로 활발하게 사용되고 있으므로 잘 알고 있기!