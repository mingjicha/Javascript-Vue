let, const ES6에서 생긴 것
그 이전에는 var를 사용

var와 let은 비슷하지만
var는 한 번 선언된 변수를 다시 선언할 수 있음

아래 코드는 let말고 var를 쓰면 문제되지 않지만,
let name = 'Mike';
console.log(name); // Mike
let name = 'Jane'; 
console.log(name); // error
let은 error 발생

또한, var는 선언하기 전에 사용할 수 있음
console.log(name); // undefined
var name = 'Mike';
var name이 나오기 전에 사용했는데 에러를 일으키지 않음
그 이유는 아래처럼 동작하기 때문
var name;
console.log(name); // undefined
name = 'Mike';
var로 선언한 모든 변수는 코드가 실제로 실행되지 않지만 최상위로 끌어올려진 것처럼 행동
이것을 호이스팅이라고 함
근데 console은 undefined으로 뜸
선언은 호이스팅 되지만 할당은 호이스팅 되지 않음
name이라는 변수만 올려진 것이고 Mike라는 값은 그 자리에 있는 것
할당은 name에서 처리됨

같은 상황에서 let은 에러가 남
console.log(name); // referenceError
let name = 'Mike';
그럼 let은 호이스팅되지 않는 걸까?
let과 const도 호이스팅됨
***호이스팅 : 스코프 내부 어디서든 변수 선언은 최상위에 선언된 것처럼 행동
그럼 왜 에러를 낼까? TDZ영역에 있는 변수들은 사용할 수 없음
let과 const는 TDZ에 영향 받기 때문에 할당하기 전에는 사용할 수 없기 때문
이는 코드를 예측 가능하게하고 잠재적인 버그를 줄일 수 있기 때문
const name = "Mike" // 함수 선언 및 할당
console.log(name) // 사용 가능

변수의 생성과정
1. 선언 단계
2. 초기화 단계 : undefined를 할당 해주는 단계
3. 할당 단계

var는 선언과 초기화가 동시에 됨
그래서 할당되기 전에 호출하면 에러가 발생되지 않고 undefined가 나옴

let은 선언과 초기화가 분리됨
호이스팅되면서 선언이 이루어지지만 초기화되려면 실제 코드에 도달했을 때 되기 때문에 레퍼런스 에러가 발생

const는 선언+초기화+할당
선언과 할당이 동시에 됨
let과 var는 (값을 바꿀 수 있으니까) 선언만 해두고 나중에 할당해도 되지만 const는 동시에 해야 함

var : 함수 스코프
let, const : 블록 스코프 (모든 코드 블록에서 선언된 변수는 코드내에서만 유효하며 외부에서는 접근 할 수 없음)
코드 블록 ex) 함수, if문, for문, while문, try/catch문 등
