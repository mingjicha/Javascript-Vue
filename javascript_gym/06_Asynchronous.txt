✔ 동기, 비동기를 아라보자.
    1) 동기 : 기다리는 것 -> 답변을 기다리는 것
        - 답변이 올 때까지 기다리는 상태 : Blocking
            1-1) 장점 : 업무가 단순하다
            1-2) 단점 : 자원을 비효율적으로 사용
    2) 비동기 : 기다리지 않는 것 -> 답변을 기다리지 않는 것
        - 답변이 올 때까지 기다리지 않는 상태 : Non-blocking
            2-1) 장점 : 자원을 효율적으로 사용
            2-2) 단점 : 업무가 복잡해질 수 있다.

📢프로그래밍적 사고로 이해를 노펴보자.
    계좌 이체 프로그래밍을 구현을 하려고 할 때,
    🅰라는 사람의 계좌에서 10,000원을 이체하여 🅱라는 사람의 게좌로 송금을 할 예정이다.
        - 이럴 때는 동기식으로 구현해야 한다.
        1) function 업무_프로세스() {
            A계좌로_인출하기(); 
            B계좌로_송금하기();  
            }
        💁‍♀️A라는 사람의 계좌에서 10,000원을 인출하는 프로그램을 실행시킨 뒤
            결과를 기다리지 않고 B라는 사람의 계좌로 만원을 송금하면❓
        2) function A계좌로_인출하기() {
            console.log('A계좌 인출하기');
            }
        💁‍♀️인출하는 과정에서 결과값이 잔액이 부족하거나 
            올바르지 않은 계좌번호 
            또 아니면 은행 점검시간으로 인해 인출을 못하는 오류가 발생할 수 있음
        3) function B계좌로_송금하기() {
            console.log('B계좌 송금하기');
            }
        💁‍♀️그러므로, A라는 프로그램을 실행하고 기다렸다가 
            다음 B계좌로 송금하는 함수를 호출하여 동기식으로 실행해야 함.

💡동기식으로 구현할지, 비동기식으로 구현할지 그 여부를 확인해서 쓰자❗