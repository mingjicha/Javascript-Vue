1️⃣컴포넌트의 기초
1. App.vue에서는 모든 컴포넌트의 집합(?)의 느낌
2. components 파일 안에는 각각의 파일들을 생성해두는 곳
  - 예를 들어서 Nav, main화면 등등등
3. 2번의 파일들을 1번 집합으로 모으려면 import와 export를 사용하기
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ위에는 지역등록
main.js는 전역등록 ex) AppCard 사용

✅전역 등록은 편리하지만
Webpack을 사용할 때, 컴포넌트를 사용하지 않더라도 빌드에 해당 컴포넌트가 포함 돼서 자스 파일의 크기가 불필요하게 증가시킴

✅컴포넌트는 사용할 때마다 해당 컴포넌트의 새 인스턴스가 생성됨 
-> 즉 사용할 때마다 setup() 함수가 실행된다는 것

⭐<PascalCase /> 뭔지 문서 확인하기!
⭐Vue.js 스타일 가이드 >>> 싱글 파일/인스턴스 컴포넌트 파일 명명 규칙 확인하기!
⭐인강) 기본편 Single File component 확인하기!

2️⃣Props
부모 컴포넌트 -> 자식 컴포넌트로 데이터를 전달하는 것 
1. 사용하기 위해선 선언 ex)AppCard
2. 선언한 것을 template에서 {{ }}와 사용
3. 값을 넣기 위해서는 부모에서 데이터 전달 ex) TheView

⭐Prop 정의 -> 디테일하게 선언하는 법(객체타입) >>> 문서 확인하기!
✅디테일한 prop의 정의는 ex)AppCard type
⭐notion에서 type의 속성들 확인하기!

✅상위 컴포넌트에서 속성을 변경했을 때 하위 컴포넌트 프롭스도 같이 업데이트 됨(반대로는 안 됨 = 단방향만 가능)
-> 하위 속성 변경 실수로 상위 속성을 변경하여 앱의 데이터 흐름을 이해하기 어렵게 만드는 것을 방지함
✅그래도 자식에서 부모로 이벤트를 올려주면서 부모가 스스로 속성을 변경할 수 있도록 하는 법❓
setup(context) -> context 객체 안에 emit이라는 메서드 사용 ex) AppCard 선언 후 TheView 사용
📌부모 -> 자식 데이터 전달할 때는 프롭스, 자식-> 부모는 에밋 사용 : 단방향으로 전달!
✅주의! 레퍼런스는 단방향 흐름을 깸
